# -*- coding: utf-8 -*-
"""DBSCAN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10vlPgQrqePao2fJZzo2myHkeNNOPHnzX
"""

!pip install tslearn

from tslearn.metrics import dtw
from sklearn.cluster import DBSCAN
import numpy as np

np.random.seed(0)  # For reproducibility
time = np.linspace(0, 20, 100)
units_data = {
    "Unit1": [np.sin(time) + np.random.normal(0, 0.1, len(time)),
              np.cos(time) + np.random.normal(0, 0.1, len(time)),
              np.sin(2 * time) + np.random.normal(0, 0.1, len(time))],
    "Unit2": [np.sin(time + 1) + np.random.normal(0, 0.1, len(time)),
              np.cos(time + 1) + np.random.normal(0, 0.1, len(time)),
              np.sin(2 * (time + 1)) + np.random.normal(0, 0.1, len(time))],
    "Unit3": [np.sin(time + 2) + np.random.normal(0, 0.1, len(time)),
              np.cos(time + 2) + np.random.normal(0, 0.1, len(time)),
              np.sin(2 * (time + 2)) + np.random.normal(0, 0.1, len(time))],
    "Unit4": [np.sin(time + 3) + np.random.normal(0, 0.1, len(time)),
              np.cos(time + 3) + np.random.normal(0, 0.1, len(time)),
              np.sin(2 * (time + 3)) + np.random.normal(0, 0.1, len(time))],
    "Unit5": [np.sin(time + 4) + np.random.normal(0, 0.1, len(time)),
              np.cos(time + 4) + np.random.normal(0, 0.1, len(time)),
              np.sin(2 * (time + 4)) + np.random.normal(0, 0.1, len(time))],
    "Unit6": [np.sin(time + 5) + np.random.normal(0, 0.1, len(time)),
              np.cos(time + 5) + np.random.normal(0, 0.1, len(time)),
              np.sin(2 * (time + 5)) + np.random.normal(0, 0.1, len(time))],
    "Unit7": [np.sin(time + 6) + np.random.normal(0, 0.1, len(time)),
              np.cos(time + 6) + np.random.normal(0, 0.1, len(time)),
              np.sin(2 * (time + 6)) + np.random.normal(0, 0.1, len(time))],
}

# Flatten the list of time series for DTW distance calculation
all_series = [series for unit_series in units_data.values() for series in unit_series]

# Calculate DTW distances between all pairs of time series
n_series = len(all_series)
dist_matrix = np.zeros((n_series, n_series))

for i in range(n_series):
    for j in range(i + 1, n_series):
        dist = dtw(all_series[i], all_series[j])
        dist_matrix[i, j] = dist
        dist_matrix[j, i] = dist

# Apply DBSCAN directly with the square distance matrix
dbscan = DBSCAN(eps=3, min_samples=2, metric='precomputed')
clusters = dbscan.fit_predict(dist_matrix)  # Use the square distance matrix directly

# Since we are clustering individual time series, organizing the cluster assignments back to units requires a different approach
# Here's an illustrative way to display the cluster assignments, considering the new context:
cluster_assignments = {}
current_series_index = 0
for unit, series_list in units_data.items():
    cluster_assignments[unit] = clusters[current_series_index:current_series_index+len(series_list)]
    current_series_index += len(series_list)

# Display the cluster assignments for each series in each unit
for unit, labels in cluster_assignments.items():
    print(f"{unit}: {labels}")